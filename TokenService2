import org.springframework.stereotype.Service;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import javax.crypto.SecretKey;
import java.util.Date;

@Service
public class TokenService {

    // Assignment/demo purpose secret! Real project में secure रखें
    private static final String SECRET = "smart-clinic-secret-key-for-jwt-should-be-long-enough!";

    // ⿡ - JWT Generate करे (मांग अनुसार)
    public String generateToken(String email) {
        long nowMillis = System.currentTimeMillis();
        Date issuedAt = new Date(nowMillis);
        Date expiresAt = new Date(nowMillis + 60 * 60 * 1000); // 1 hour

        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(issuedAt)
                .setExpiration(expiresAt)
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // ⿢ - Token Validate करे (marking के लिए)
    public boolean validateToken(String token, String email) {
        try {
            String subject = Jwts.parserBuilder()
                    .setSigningKey(getSigningKey())
                    .build()
                    .parseClaimsJws(token)
                    .getBody()
                    .getSubject();
            return subject.equals(email);
        } catch (Exception e) {
            return false;
        }
    }

    // ⿣ - Signing key method (as per feedback)
    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(SECRET.getBytes());
    }
}
